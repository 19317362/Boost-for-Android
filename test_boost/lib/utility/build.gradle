
apply plugin: 'com.android.model.native'


def my_inc =     [

       

]
//-------------------------------------------------
def my_incs =     my_inc.collect{ "-I"  + file(it)}

model {
    android {
        compileSdkVersion = my_compileSdkVersion()
        buildToolsVersion = my_buildToolsVersion()


        //---------------------------------

        defaultConfig {
            minSdkVersion.apiLevel = my_minSdkVersion()
            targetSdkVersion.apiLevel = my_targetSdkVersion()
            versionCode = 1
            versionName = '1.0'
        }

        abis{
            my_abis().each { abi ->
                create(abi) {
         
                }
            }
        }

        ndk {
            moduleName = 'utility'


            platformVersion = platform_ver() // defaultConfig.minSdkVersion.apiLevel.asType(Integer) // keep equal to minSdk
            toolchain = tc_name()
            toolchainVersion = tc_ver()
            stl = std_lib()
            //--------------------------------
            cppFlags.addAll(['-std=c++14', '-frtti', '-fexceptions'])
            cppFlags.addAll(my_incs)

            ldLibs.addAll(['log'])
            abiFilters.addAll(my_abis())
        }

        sources {
            main {
                jni {
                        exportedHeaders
                        {
                            srcDirs     "src/main/jni",
                                        "${libs_dir()}",
                                        "${libs_dir()}/lib_utility",
                                        "${libs_dir()}/lib_utility/src"
                        }

                        source
                        {
                            srcDirs     "src/main/jni" ,
                                        "${libs_dir()}/lib_utility"

                                        excludes += "**/test/*.*"    // tests dont work with libusb yet
                        }

                        dependencies {
                    //        library 'boost_thread'              linkage 'shared'
                        }
                }
            }

        }
    }


       repositories {
                  libs(PrebuiltLibraries) {
               //       boost_thread    { binaries.withType(SharedLibraryBinary) { sharedLibraryFile = file("${boost_lib_dir    (targetPlatform.getName())}/libboost_thread.so") } }
        }    }

}
